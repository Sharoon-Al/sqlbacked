"""OpenAI and Azure GPT SQL Generator"""

from engine.llms import base
from engine.prompts import fix_sql_query_error
from engine.utils import prompts


class OpenAIFixSQLQueryError(base.BaseGenerator):
    """Fix the SQL Query Given the Error"""

    def __init__(self) -> None:
        self.base_prompt = fix_sql_query_error.FIX_SQL_QUERY_ERROR_PROMPT

    def proceed(self, llm_result: list[dict]):
        """Check if we should move to the next step or end the pipeline"""
        content = llm_result["choices"][0]["message"]["content"]
        if content.replace("CATEGORY:", "").strip().lower().startswith("yes"):
            return True
        else:
            return False

    def generate(
        self,
        question: str,
        database_schema,
        sql_query: str,
        error: str = None,
        query_id: str = None,
        database_type: str = None,
    ):
        """Generate validation remarks regarding sql queries compatibility with database

        Args:
            sql_query (str): SQL query generated by model
            database_schema (str): schema of relevant table

        Returns:
            (json): result from the database
        """

        prompt = prompts.prepare_final_sql_query_error_prompt_v1(
            base_prompt=self.base_prompt,
            question=question,
            sql_query=sql_query,
            error=error,
            database_type=database_type,
        )

        prompts.check_prompt_attack(prompt=prompt)
        llm_result = self._get_result_json(prompt=prompt)

        if query_id is not None:
            self._save_llm_result(
                prompt,
                llm_result,
                query_id,
            )

        return llm_result
