"""Utility functions related to pormpts"""

from utils import commons

"""Prompt to generate sql query"""


@commons.error_decorator(error_type=ValueError)
def check_prompt_attack(prompt: str):
    """Check if a prompt has malicious intent

    Args:
        prompt (str): final prompt
    """
    # future: We will have to write a proper function in the future.
    is_valid_prompt = prompt is not None
    if not is_valid_prompt:
        raise ValueError("Prompt attack detected!")


def prepare_sql_prompt_v2(
    base_prompt: str,
    query: str,
    database_type: str,
    database_schema: str,
    query_schema_feasibility_remark: str,
):
    """Add query, database_type and database schema to the prompt

    Args:
        query (str): user query
        database_type (str): database type
        database_schema (str): database schema
        query_schema_feasibility_remark (str): remarks regarding the query compatibility with database

    Returns:
        prompt(str): final prompt with all required user related variables
    """
    prompt = base_prompt.format(
        **{
            "query_schema_feasibility_remark": query_schema_feasibility_remark,
            "user_query": query,
            "database_type": database_type,
            "database_schema": database_schema,
        }
    )
    return prompt


def prepare_query_schema_match_prompt_v1(
    base_prompt: str, query: str, database_schema: str, chat_history: str
):
    """Add query, database schema to the prompt

    Args:
        query (str): user query
        database_schema (str): database schema

    Returns:
        prompt(str): final prompt with all required user related variables
    """
    prompt = base_prompt.format(
        **{
            "user_query": query,
            "database_schema": database_schema,
            "chat_history": chat_history,
        }
    )
    return prompt


def prepare_query_for_history_summarization(
    base_prompt: str, query: str, history: str
) -> str:
    """Format the prompt for chat history summarization

    Args:
        base_prompt (str): the base prompt to format
        query (str): the query to format the base prompt with
        history (str): the chat history so far

    Returns:
        prompt (str): final prompt with all required variables inserted into the base prompt
    """
    prompt = base_prompt.format(
        **{
            "chat_history": history,
            "user_question": query,
        }
    )
    return prompt


def prepare_final_sql_query_error_prompt_v1(
    base_prompt, question: str, sql_query: str, error: str, database_type: str
):
    """Add sql_query, best practices to the prompt

    Args:
        sql_query (str): sql query generated by model

    Returns:
        prompt(str): final prompt with all required user related variables
    """
    prompt = base_prompt.format(
        **{
            "question": question,
            "sql_query": sql_query,
            "error": error,
            "database_type": database_type,
        }
    )
    return prompt
